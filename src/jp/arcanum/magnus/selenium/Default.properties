#============================================================
#
# Default.properties
# 
# this is a default property file for SeleniumConverter.
# 
#============================================================



#============================================================
# Excel Column information
#
#         
#
#
#============================================================

excel.settings.index=index
excel.settings.col1=column1
excel.settings.col2=column2
excel.settings.col3=column3
excel.settings.col4=column4
#   .
#   .
#   .
#  if you need excel columns...



#============================================================
# Selenium Code Convert information
# 
# fomula ver1 
# 
#     selenium.action.[actiontype].[excel.colx]=messages...${target}
#  
#     Reserved word lists
#          
#         ${action}  this is a Selenium Code from Action Type
#         ${target}  this is a Selenium Code from target
#         ${value}   this is a Selenium Code from value
#  
#============================================================



#----------------------------------
# this is a default convert format
#----------------------------------
selenium.action.default.column1=${action}
selenium.action.default.column2=execute[ ${action} ]
selenium.action.default.column3=target[ ${target} ]
selenium.action.default.column4=value[ ${value} ]


#----------------------------------
# a formats distinguished by Selenium Action
#----------------------------------




#----------------------------------
#click ( locator )
#リンク、ボタン、チェックボックス、ラジオボタンをクリックします。
#通常のリンクのようにクリックすると新たなページに遷移する場合は、"waitForPageToLoad"コマンドを使用して下さい。
#(引数の説明)
#* locator - クリックする要素のelement locator 
#----------------------------------

selenium.action.click.column2=ボタンを押下
selenium.action.click.column3=ボタン = ${target}
selenium.action.click.column4=

selenium.action.clickAndWait.column2=ボタンを押下\n（レスポンスを待つ）
selenium.action.clickAndWait.column3=ボタン = ${target}
selenium.action.clickAndWait.column4=


#----------------------------------
#fireEvent ( locator,eventName )
#"onEvent"ハンドラに一致するトリガーを起動するために、明示的にイベントをシミュレートします。
#(引数の説明)
#* locator - an element locator
#* eventName - イベント名。例："focus" or "blur" 
#----------------------------------

selenium.action.fireEvent.column2=次の選択を行う
selenium.action.fireEvent.column3=セレクト = ${target}
selenium.action.fireEvent.column4=値 = ${value}



#----------------------------------
#keyPress ( locator,keycode ) （バージョン0.7.0新コマンド）
#ユーザーがキーを押して離すことをシミュレートします。
#(引数の説明)
#* locator - an element locator
#* keycode - 押そうとするキーのキーコード。通常はASCIIコード。 
#----------------------------------

selenium.action.fireEvent.column2=画面の次のコンポーネントでキーを押下
selenium.action.fireEvent.column3=コンポーネント = ${target}
selenium.action.fireEvent.column4=キー = ${value}


#----------------------------------
#keyDown ( locator,keycode ) （バージョン0.7.0新コマンド）
#ユーザーがキーを押した状態(まだ離していない状態)をシミュレートします。
#(引数の説明)
#* locator - an element locator
#* keycode -押そうとするキーのキーコード。通常はASCIIコード。 
#----------------------------------

selenium.action.keyDown.column2=画面の次のコンポーネントでキーを押下（押すまで）
selenium.action.keyDown.column3=コンポーネント = ${target}
selenium.action.keyDown.column4=キー = ${value}


#----------------------------------
#keyUp ( locator,keycode ) （バージョン0.7.0新コマンド）
#ユーザーが(押した)キーを離すことをシミュレートします。
#(引数の説明)
#* locator - an element locator
#* keycode -押そうとするキーのキーコード。通常はASCIIコード。 
#----------------------------------

selenium.action.keyUp.column2=画面の次のコンポーネントでキーを押下（押してから）
selenium.action.keyUp.column3=コンポーネント = ${target}
selenium.action.keyUp.column4=キー = ${value}


#----------------------------------
#mouseOver ( locator ) （バージョン0.7.0新コマンド）
#指定した要素にマウスを合わせることをシミュレートします。
#(引数の説明)
#* locator - an element locator 
#----------------------------------

selenium.action.mouseOver.column2=次のコンポーネントにマウスを合わせる。
selenium.action.mouseOver.column3=コンポーネント = ${target}


#----------------------------------
#mouseDown ( locator ) （バージョン0.7.0新コマンド）
#指定した要素上でマウスのボタンを押した状態(離さない状態)をシミュレートします。
#(引数の説明)
#* locator - an element locator 
#----------------------------------

selenium.action.mouseDown.column2=次のコンポーネントでマウスを押す
selenium.action.mouseDown.column3=コンポーネント = ${target}


#----------------------------------
#type ( locator,value )
#テキストボックスなどの入力フィールドに値をタイプ(入力)します。
#コンボボックスやチェックボックスのvalueを設定するためにも使うことができます。その場合は表示されている文字ではなく、
#選択されているoptionのvalue属性を指定します。
#(引数の説明)
#* locator - an element locator
#* value - 入力する値 
#----------------------------------

selenium.action.type.column2=次のコンポーネントに値を入力する。
selenium.action.type.column3=コンポーネント = ${target}
selenium.action.type.column4=値 = ${value}


#----------------------------------
#check ( locator ) （バージョン0.7.0新コマンド）
#指定したチェックボックスやラジオボタンを選択状態にします。
#(引数の説明)
#* locator - an element locator 
#----------------------------------

selenium.action.check.column2=次のチェックボックスをチェックする
selenium.action.check.column3=コンポーネント = ${target}


#----------------------------------
#uncheck ( locator ) （バージョン0.7.0新コマンド）
#指定したチェックボックスやラジオボタンを非選択状態にします。
#(引数の説明)
#* locator - an element locator 
#----------------------------------

selenium.action.uncheck.column2=次のチェックボックスのチェックをはずす。
selenium.action.uncheck.column3=コンポーネント = ${target}


#----------------------------------
#select ( selectLocator,optionLocator )
#optionLocatorに基づいてドロップダウン形式のoptionを選択します。
#(訳注)もしLocatorが複数のoptionに合致する場合は、最初に合致したものが選択されます。
#(引数の説明)
#* selectLocator - select要素を示すelement locator
#* optionLocator - option locator
#.
#optionLocator とはHTMLのselect要素中のoption要素を特定するものです。
#以下のoptionLocatorがあります。
#. 
#label=ラベル文字列パターン
#ラベル即ち画面上に表示されるテキスト文字列を元にマッチングします(これはデフォルトのoptionLocatorです)。
#(例)
#* label=regexp:^[Oo]ther
#. 
#value=value属性の文字列パターン
#value属性に基づいてマッチングします。
#(例)
#* value=other
#. 
#id=id属性値
#id属性に基づいてマッチングします。
#(例)
#* id=option1
#. 
#index=インデックス番号
#option要素のインデックスに基づきマッチングします。インデックスは0から開始(オフセットゼロ)です。
#(例)
#* index=2
#. 
#optionLocatorのプリフィックスが無い場合は、デフォルトの動作はlabelでのマッチングとなります。
#(訳注)
#バージョン0.6とバージョン0.7.0では動作に差分があります。
#selectコマンドを２回続けて実行した場合、以下のように動作します。 バージョン0.6  両方とも選択状態となる。  
#バージョン0.7.0  後から実行した方のみが選択状態となる。  
#
#バージョン0.7.0で両方とも選択状態にするためには後述のaddSelectionコマンドを使用してください。
#----------------------------------


selenium.action.select.column2=次の選択肢を選択する。
selenium.action.select.column3=選択肢 = ${target}
selenium.action.select.column4=選択値 = ${target}

selenium.action.selectAndWait.column2=次の選択肢を選択する。\n（レスポンスを待つ）
selenium.action.selectAndWait.column3=選択肢 = ${target}
selenium.action.selectAndWait.column4=選択値 = ${target

#----------------------------------
#addSelection ( locator,optionLocator ) （バージョン0.7.0新コマンド）
#select要素で複数選択できる(multiple属性がある)場合に、指定したoption要素を選択されたoption要素へ追加します。 
#----------------------------------



#----------------------------------
#removeSelection ( locator,optionLocator ) （バージョン0.7.0新コマンド）
#select要素で複数選択できる(multiple属性がある)場合に、指定したoption要素を選択されたoption要素から取り除きします。
#(引数の説明)
#* locator - multiple属性ありのselect要素を示すelement locator
#* optionLocator - an option locator 
#----------------------------------



#----------------------------------
#submit ( formLocator ) （バージョン0.7.0新コマンド）
#指定したformのsubmitを行います。これは特に、例えばinput要素が一つだけの検索formなど、submitボタンが無いformに
#対して役に立ちます。
#(引数の説明)
#* formLocator - submitしたいformを示すelement locator 
#----------------------------------


selenium.action.submit.column2=ボタンを押下
selenium.action.submit.column3=ボタン = ${target}
selenium.action.submit.column4=


#----------------------------------
#open ( url )
#TestRunnerのテスト用フレームにて、指定したURLを開きます。相対パス又は絶対パスの両者とも指定可能です。
#openコマンドはURLを開いた後テストを続行する前に新たなページがロードされるのを待ちます。つまり、
#"AndWait"サフィックスが暗黙的に付与されているのです。
#(注）ブラウザにおけるセキュリティ制限("Same Origin Policy"と言われるクロスサイトスクリプティング対策)の為、
#URLはSelenium(TestRunner.html)と同じドメイン上になければなりません。もし異なるドメイン上のURLを開く必要があるなら、
#Selenium RC(Remote Control)を使ってください。
#(引数の説明)
#* url - 開こうとするURL：絶対パスまたは相対パス 
#----------------------------------

selenium.action.open.column2=次のＵＲＬを開く
selenium.action.open.column3=URL = ${target}
selenium.action.open.column4=


#----------------------------------
#selectWindow ( windowID )
#ポップアップウィンドウを選択します。一度ポップアップウィンドウが選択されると、全てのコマンドはそのウィンドウに
#対して実行されます。元のメインウィンドウを再び選択するためには、ターゲットにnullを指定します。
#(引数の説明)
#* windowID - 選択しようとするウィンドウのJavaScript window ID 
#----------------------------------


selenium.action.selectWindow.column2=次のポップアップウィンドウを選択します
selenium.action.selectWindow.column3=URL = ${target}
selenium.action.selectWindow.column4=


#----------------------------------
#waitForPopUp ( windowID,timeout ) （バージョン0.7.0新コマンド）
#ポップアップウィンドウが出現してロードされるのを待ちます。
#(引数の説明)
#* windowID - 出現するウィンドウのJavaScript window ID
#* timeout - タイムアウト(ミリ秒)。タイムアウトした場合はエラーとなります。 
#----------------------------------


selenium.action.waitForPopUp.column2=次のポップアップウィンドウが出現し表示されるのを待ちます。
selenium.action.waitForPopUp.column3=URL = ${target}
selenium.action.waitForPopUp.column4=待つ時間 = ${target} ミリ秒


#----------------------------------
#chooseCancelOnNextConfirmation ( )
#デフォルトでは、Seleniumがオーバーライドするwindow.confirm()関数は、
#ユーザーがOKボタンをクリックしたのと同様の動作でtrueを返します。
#このコマンドを実行した後では、次に呼ばれたconfirm()関数は、
#ユーザがCancelボタンをクリックしたのと同様の動作でfalseを返します。 
#----------------------------------

selenium.action.chooseCancelOnNextConfirmation.column2=次のポップアップウィンドウはキャンセルを押下する。
selenium.action.chooseCancelOnNextConfirmation.column3=
selenium.action.chooseCancelOnNextConfirmation.column4=

#----------------------------------
#chooseOkOnNextConfirmation ( )
#----------------------------------

selenium.action.chooseOkOnNextConfirmation.column2=次のポップアップウィンドウはＯＫを押下する。
selenium.action.chooseOkOnNextConfirmation.column3=
selenium.action.chooseOkOnNextConfirmation.column4=



#----------------------------------
#answerOnNextPrompt ( answer )
#次に実行するJavascriptのプロンプトwindow.prompt()に対するレスポンスとして指定した文字列を返却するよう
#Seleniumに指示します。
#(引数の説明)
#* answer - 返却する文字列 
#----------------------------------



#----------------------------------
#goBack ( )
#ブラウザの"戻る"ボタンをユーザがクリックすることをシミュレートします。 
#----------------------------------

selenium.action.goBack.column2=ブラウザの［戻る］を押下
selenium.action.goBack.column3=


#----------------------------------
#refresh ( ) （バージョン0.7.0新コマンド）
#ブラウザの"更新"ボタンをユーザがクリックすることをシミュレートします。 
#----------------------------------

selenium.action.refresh.column2=ブラウザをリフレッシュする。
selenium.action.refresh.column3=


#----------------------------------
#close ( )
#ポップアップしたウィンドウ又はタブのタイトルバーで"閉じる"ボタンをクリックすることをシミュレートします。 
#----------------------------------

selenium.action.close.column2=［閉じる］を押下
selenium.action.close.column3=
selenium.action.close.column4=


#----------------------------------
#setCursorPosition ( locator,position ) （Coreバージョン0.7.0未収録、RC0.8.1新規コマンド）
#テキスト入力のカーソルをinput要素またはテキストエリアの指定した場所に動かします。指定した要素がinputまたは
#テキストエリアでなかった場合はコマンドエラーとなります。
#(引数の説明)
#* locator - input要素またはテキストエリアのelement locator
#* position - 入力するフィールド内でカーソルを何文字目に置くか。入力フィールド内のカーソル位置は0から始まり、
#フィールドの最後は-1で表します。 
#----------------------------------



#----------------------------------
#setContext ( context,logLevelThreshold ) （バージョン0.7.0新コマンド）
#ステータスバーにメッセージを書き込み、ブラウザサイドのログに記述を追加します。
#logLevelThresholdを指定する場合、ロギングのスレッショルドを指定するレベル(debug, info, warn, error)に合わせて設定して下さい
#(ブラウザサイドのログはサーバー側には送られず、ClientDriverにも見えないことに注意してください)
#(引数の説明)
#* context - ブラウザへ送るメッセージ
#* logLevelThreshold - "debug", "info", "warn", "error"のうちどれか１つ。ブラウザサイドのロギング用スレッショルドを設定すること。 
#----------------------------------



#----------------------------------
#waitForCondition ( script,timeout ) （バージョン0.7.0新コマンド）
#指定したJavascriptを実行し、その評価がtrueになるまで待ちます。Javascriptは複数行に渡るかもしれませんが、最終行の結果のみ
#が考慮されます。
#デフォルトでは、指定したJavascriptはあなたのアプリケーションのウィンドウではなく、TestRunnerの制御用ウィンドウで
#実行されることに注意してください。あなたのアプリケーションのウィンドウを取得するためには、selenium.browserbot.getCurrentWindow()を
#実行してからあなたのJavascriptを実行してください。
#(引数の説明)
#* script - 実行するJavaScript
#* timeout - タイムアウト(ミリ秒)。タイムアウトした場合はコマンドエラーとなります。 
#----------------------------------



#----------------------------------
#setTimeout ( timeout ) （バージョン0.7.0新コマンド）
#SeleniumがActionコマンドが完了するまでに待つ時間を指定します。
#"open"コマンドと"WaitFor～"コマンドはコマンド完了を待つ必要があります。
#デフォルトのタイムアウトは30秒です。
#(引数の説明)
#* timeout - タイムアウト(ミリ秒)。タイムアウトした場合はコマンドエラーとなります。 
#----------------------------------

selenium.action.setTimeout.column2=次の時間待つ\n（タイムアウト時エラー）
selenium.action.setTimeout.column3=待つ時間＝${target} ミリ秒
selenium.action.setTimeout.column4=

#----------------------------------
#waitForPageToLoad ( timeout ) （バージョン0.7.0新コマンド）
#新しいページがロードされるのを待ちます。
#あなたは"AndWait"サフィックス("clickAndWait"や "selectAndWait", "typeAndWait"など)の代わりにこの
#コマンドを使うことができます。"AndWait"サフィックスはJS API内でのみ使うことができるのです。
#Seleniumは新しいページをロードした跡を絶えず保持しており、ページを最初にロードした時には
#"newPageLoaded"フラグを設定しています。Seleniumの他のコマンドを実行するとフラグはfalseになります。従って、
#ページがロードされるのを待ちたい場合には、ページのロードを発生させるコマンドを実行した直後にこのコマンドを実行しなければなりません。
#(引数の説明)
#* timeout - タイムアウト(ミリ秒)。タイムアウトした場合はコマンドエラーとなります。 
#----------------------------------










































#assertSelected ( selectLocator,optionLocator )
#ドロップダウンのselect要素にて選択したopotion要素がoptionLocatorとマッチしているか検証します。
#optionLocatorについてはselectコマンドを参照して下さい。
#.
#(引数の説明)
#* selectLocator - select要素を示すelement locator
#* optionLocator - an option locator (例: "John Smith")
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertNotSelected ( selectLocator, optionLocator ) 
#verifySelected ( selectLocator, optionLocator ) 
#verifyNotSelected ( selectLocator, optionLocator ) 
#waitForSelected ( selectLocator, optionLocator ) 
#waitForNotSelected ( selectLocator, optionLocator ) 


selenium.action.assertSelected.column2=値の検証
selenium.action.assertSelected.column3=コンポーネント = ${target}
selenium.action.assertSelected.column4=値 = ${value}


#storeAlertPresent ( variableName )
#alertが発生したかどうかを取得します。この関数は例外をスローすることはありません。
#.
#(戻り値)
#alertが発生した場合、trueが返ります。
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertAlertPresent ( ) 
#assertAlertNotPresent ( ) 
#verifyAlertPresent ( ) 
#verifyAlertNotPresent ( ) 
#waitForAlertPresent ( ) 
#waitForAlertNotPresent ( ) 



#storePromptPresent ( variableName )
#promptダイアログが発生したかどうかを取得します。この関数は例外をスローすることはありません。
#.
#(戻り値)
#保留中のpromptがある場合、trueが返ります。
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertPromptPresent ( ) 
#assertPromptNotPresent ( ) 
#verifyPromptPresent ( ) 
#verifyPromptNotPresent ( ) 
#waitForPromptPresent ( ) 
#waitForPromptNotPresent ( ) 



#storeConfirmationPresent ( variableName )
#confirm()メソッドが呼ばれたかどうかを取得します。この関数は例外をスローすることはありません。
#.
#(戻り値)
#保留中の確認ダイアログがある場合、trueが返ります。
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertConfirmationPresent ( ) 
#assertConfirmationNotPresent ( ) 
#verifyConfirmationPresent ( ) 
#verifyConfirmationNotPresent ( ) 
#waitForConfirmationPresent ( ) 
#waitForConfirmationNotPresent ( ) 



#storeAlert ( variableName )
#事前に実行したactionコマンドによって発生したJavaScriptアラートのメッセージを回収します。アラートが
#無い場合にはエラーとなります。
#このコマンドを実行してアラートを取得することは手動でOKボタンをクリックするのと同じ効果があります。
#アラートが発生したけれども検証も取得もしなかった場合、Seleniumの次のコマンドは失敗します。
#(注)Seleniumの元では、JavaScriptアラートは目に見えるアラートダイアログとしてポップアップしません。
#(注)Seleniumはページのonload()イベントハンドラによって作られれたJavaScriptアラートはサポートしていません。
#この場合は目に見えるダイアログが作成され、誰かが手動でOKをクリックするまでSeleniumは停止したままです。
#.
#(戻り値)#
#最も新たに発生したJavaScript alertのメッセージ
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertAlert ( メッセージの文字列パターン ) 
#assertNotAlert ( メッセージの文字列パターン ) 
#verifyAlert ( メッセージの文字列パターン ) 
#verifyNotAlert ( メッセージの文字列パターン ) 
#waitForAlert ( メッセージの文字列パターン ) 
#waitForNotAlert ( メッセージの文字列パターン ) 



#storeConfirmation ( variableName )
#事前に実行したActionコマンドによって発生したJavascriptの確認ダイアログのメッセージを取得します。
#デフォルトでは、confirm関数はtrueを返します。それはユーザーがOKボタンをクリックするのと同様の効果です。
#その動作は事前にchooseCancelOnNextConfirmationコマンドを実行することで変更できます。確認ダイアログが
#発生して検証も取得もしなかった場合、Seleniumの次のコマンドはエラーとなります。
#(注)Seleniumの制御下では、確認ダイアログは目に見えるダイアログとしてポップアップしません。
#(注)Seleniumは、ページのonload()イベントハンドラによって発生するJavascriptの確認ダイアログはサポート
#していません。この場合には、目に見えるダイアログが出現し、手動でOKをクリックするまでSeleniumは停止してしまいます。
#.
#(戻り値)
#最も新たに発生したJavaScript 確認ダイアログのメッセージ
#.#
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertConfirmation ( メッセージの文字列パターン ) 
#assertNotConfirmation ( メッセージの文字列パターン ) 
#verifyConfirmation ( メッセージの文字列パターン ) 
#verifyNotConfirmation ( メッセージの文字列パターン ) 
#waitForConfirmation ( メッセージの文字列パターン ) 
#waitForNotConfirmation ( メッセージの文字列パターン ) 



#storePrompt ( variableName )
#事前に実行されたActionコマンドによって発生したJavascriptの質問プロンプトのメッセージを回収します。
#プロンプトに対してうまく扱うためには、事前にanswerOnNextPromptコマンドを実行しておく必要があります。
#プロンプトが発生して取得も検証もしなかった場合、Seleniumの次のコマンドはエラーとなります。
#(注)Seleniumの制御下では、プロンプトは目に見えるダイアログとしてポップアップしません。
#(注)Seleniumは、ページのonload()イベントハンドラによって発生するJavascriptの確認ダイアログはサポート
#していません。この場合には、目に見えるダイアログが出現し、手動でOKをクリックするまでSeleniumは停止してしまいます。
#.
#(戻り値)
#最も新たに発生したJavaScript 質問promptのメッセージ
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertPrompt ( メッセージの文字列パターン ) 
#assertNotPrompt ( メッセージの文字列パターン ) 
#verifyPrompt ( メッセージの文字列パターン ) 
#verifyNotPrompt ( メッセージの文字列パターン ) 
#waitForPrompt ( メッセージの文字列パターン ) 
#waitForNotPrompt ( メッセージの文字列パターン ) 



#storeLocation ( variableName )
#現在のページの絶対URLを取得します。
#.
#(戻り値)
#現在のページの絶対URL
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertLocation ( URLの文字列パターン ) 
#assertNotLocation ( URLの文字列パターン ) 
#verifyLocation ( URLの文字列パターン ) 
#verifyNotLocation ( URLの文字列パターン ) 
#waitForLocation ( URLの文字列パターン ) 
#waitForNotLocation ( URLの文字列パターン ) 



#storeTitle ( variableName )
#現在のページのタイトルを取得します。
#.
#(戻り値)
#現在のページのタイトル
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertTitle ( titleの文字列パターン ) 
#assertNotTitle ( titleの文字列パターン ) 
#verifyTitle ( titleの文字列パターン ) 
#verifyNotTitle ( titleの文字列パターン ) 
#waitForTitle ( titleの文字列パターン ) 
#waitForNotTitle ( titleの文字列パターン ) 



#storeBodyText ( variableName )
#そのページのテキスト全体を取得します。
#.
#(戻り値)
#そのページのテキスト全体
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertBodyText ( テキスト文字列パターン ) 
#assertNotBodyText ( テキスト文字列パターン ) 
#verifyBodyText ( テキスト文字列パターン ) 
#verifyNotBodyText ( テキスト文字列パターン ) 
#waitForBodyText ( テキスト文字列パターン ) 
#waitForNotBodyText ( テキスト文字列パターン ) 



#storeValue ( locator, variableName )
#入力フィールド及びvalueパラメータを持つ要素の(空白整形された)値を取得します。チェックボックスや
#ラジオボタンに対しては、チェックされているか(選択されているか)どうかで"on"または"off"が取得されます。
#.
#(引数の説明)
#* locator - an element locator
#.
#(戻り値)
#要素のvalue、又はチェックボックス/ラジオボタンの場合は "on/off"
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertValue ( locator, value属性の文字列パターン ) 
#assertNotValue ( locator, value属性の文字列パターン ) 
#verifyValue ( locator, value属性の文字列パターン ) 
#verifyNotValue ( locator, value属性の文字列パターン ) 
#waitForValue ( locator, value属性の文字列パターン ) 
#waitForNotValue ( locator, value属性の文字列パターン ) 



#storeText ( locator, variableName )
#要素のテキスト文字列を取得します。このコマンドはテキストを含むどの要素に対しても動作します。
#このコマンドは、ユーザに見えるレンダリングされたテキストである要素について、テキストコンテント
#(Mozillaのようなブラウザ)の要素もインナーテキスト(IEのようなブラウザ)の要素も取り扱います。
#.
#(引数の説明)
#* locator - an element locator
#.
#(戻り値)
#要素のテキスト文字列
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertText ( locator, テキスト文字列パターン ) 
#assertNotText ( locator, テキスト文字列パターン ) 
#verifyText ( locator, テキスト文字列パターン ) 
#verifyNotText ( locator, テキスト文字列パターン ) 
#waitForText ( locator, テキスト文字列パターン ) 
#waitForNotText ( locator, テキスト文字列パターン ) 



#storeEval ( script, variableName )
#指定したJavascriptを実行し、その評価結果を取得します。実行するスクリプトは複数行に渡るかも
#しれませんが、最終行の結果のみを取得します。
#デフォルトでは、スクリプトは"selenium"オブジェクト自身のコンテキスト内で実行されることに注意してください。
#つまり、スクリプトはSeleniumオブジェクトを参照して、あなたのアプリケーションのウィンドウではなく、
#TestRunnerのテストウィンドウに対して実行されてしまいます。
#もしあなたのアプリケーションのウィンドウを参照する必要があるなら、あなたはthis.browserbot.getCurrentWindow()を
#使うことができます。また、あなたのアプリケーションのとある要素についてのLocatorを使う必要があるなら、
#this.page().findElement("指定したいElementLocator")を使うことができます。
#.
#(引数の説明)
#* script - 実行するJavaScript
#.
#(戻り値)
#Javascriptを実行した評価結果
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertEval ( script, scriptを実行した結果の文字列パターン ) 
#assertNotEval ( script, scriptを実行した結果の文字列パターン ) 
#verifyEval ( script, scriptを実行した結果の文字列パターン ) 
#verifyNotEval ( script, scriptを実行した結果の文字列パターン ) 
#waitForEval ( script, scriptを実行した結果の文字列パターン ) 
#waitForNotEval ( script, scriptを実行した結果の文字列パターン ) 



#storeChecked ( locator, variableName )
#トグルボタン(チェックボックス/ラジオボタン)が選択されているかどうかを取得します。指定した要素が無かったり
#トグルボタンでない場合にはエラーとなります。
#.
#(引数の説明)
#* locator - チェックボックスまたはラジオボタンを示すelement locator
#.
#(戻り値)
#選択されているかどうかによって"true"又は"false"
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertChecked ( locator, pattern ) 
#assertNotChecked ( locator, pattern ) 
#verifyChecked ( locator, pattern ) 
#verifyNotChecked ( locator, pattern ) 
#waitForChecked ( locator, pattern ) 
#waitForNotChecked ( locator, pattern ) 





#storeTable ( tableCellAddress, variableName )
#table要素のセルアドレスからテキスト文字列を取得します。セルアドレスの書式は
#「テーブルを示すElementLocator.行.カラム」です。行とカラムは0始まりで指定します。
#.
#(引数の説明) 
#tableCellAddress - table要素のセルアドレス。例："foo.1.4"
#.
#(戻り値)
#指定したセルのテキスト文字列
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertTable ( tableCellAddress, 指定したセルの文字列パターン ) 
#assertNotTable ( tableCellAddress, 指定したセルの文字列パターン ) 
#verifyTable ( tableCellAddress, 指定したセルの文字列パターン ) 
#verifyNotTable ( tableCellAddress, 指定したセルの文字列パターン ) 
#waitForTable ( tableCellAddress, 指定したセルの文字列パターン ) 
#waitForNotTable ( tableCellAddress, 指定したセルの文字列パターン ) 



#storeSelectedLabels ( selectLocator, variableName )
#指定したselect要素(複数選択可能なものも含む)にて選択されている全てのoption要素の
#ラベル(表示されるテキスト文字列)を取得します。
#.
#(引数の説明) 
#selectLocator - select要素を示すelement locator
#.
#(戻り値)
#選択されているoption要素ラベルの配列(カンマ区切り)
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertSelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 
#assertNotSelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 
#verifySelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 
#verifyNotSelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 
#waitForSelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 
#waitForNotSelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 



#storeSelectedLabel ( selectLocator, variableName )
#指定したselect要素において選択されているoption要素のラベル(表示されるテキスト文字列)を取得します。
#.
#(引数の説明)
#. 
#selectLocator - select要素を示すelement locator
#(戻り値)
#選択されているoption要素のラベル
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertSelectedLabel ( selectLocator, ラベル文字列パターン ) 
#assertNotSelectedLabel ( selectLocator, ラベル文字列パターン ) 
#verifySelectedLabel ( selectLocator, ラベル文字列パターン ) 
#verifyNotSelectedLabel ( selectLocator, ラベル文字列パターン ) 
#waitForSelectedLabel ( selectLocator, ラベル文字列パターン ) 
#waitForNotSelectedLabel ( selectLocator, ラベル文字列パターン ) 



#storeSelectedValues ( selectLocator, variableName )
#指定したselect要素(複数選択可能なものを含む)にて選択されている全てのoption要素のvalue属性値を取得します。
#.
#(引数の説明)
#* selectLocator - select要素を示すelement locator
#.
#(戻り値)
#選択されているoption要素のvalue属性値配列(カンマ区切り)
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertSelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 
#assertNotSelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 
#verifySelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 
#verifyNotSelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 
#waitForSelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 
#waitForNotSelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 



#storeSelectedValue ( selectLocator, variableName )
#指定したselect要素にて選択されているoption要素のvalue属性値を取得します。
#.
#(引数の説明)
#* selectLocator - select要素を示すelement locator
#.
#(戻り値)
#選択されているoption要素のvalue属性値
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertSelectedValue ( selectLocator, value属性値文字列パターン ) 
#assertNotSelectedValue ( selectLocator, value属性値文字列パターン ) 
#verifySelectedValue ( selectLocator, value属性値文字列パターン ) 
#verifyNotSelectedValue ( selectLocator, value属性値文字列パターン ) 
#waitForSelectedValue ( selectLocator, value属性値文字列パターン ) 
#waitForNotSelectedValue ( selectLocator, value属性値文字列パターン ) 



#storeSelectedIndexes ( selectLocator, variableName )
#指定したselect要素(複数選択可能なものを含む)にて選択されている全てのoption要素のインデックス
#(0から始まるoptionの順番)を取得します。
#.
#(引数の説明)
#* selectLocator - select要素を示すelement locator
#.
#(戻り値)
#選択されているoption要素のインデックス配列(カンマ区切り)
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertSelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 
#assertNotSelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 
#verifySelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 
#verifyNotSelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 
#waitForSelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 
#waitForNotSelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 



#storeSelectedIndex ( selectLocator, variableName )
#指定したselect要素にて選択されているoption要素のインデックス(0から始まるoptionの順番)を取得します。
#.
#(引数の説明)
#* selectLocator - select要素を示すelement locator
#.
#(戻り値)
#選択されているoption要素のインデックス
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertSelectedIndex ( selectLocator, インデックス番号 ) 
#assertNotSelectedIndex ( selectLocator, インデックス番号 ) 
#verifySelectedIndex ( selectLocator, インデックス番号 ) 
#verifyNotSelectedIndex ( selectLocator, インデックス番号 ) 
#waitForSelectedIndex ( selectLocator, インデックス番号 ) 
#waitForNotSelectedIndex ( selectLocator, インデックス番号 ) 



#storeSelectedIds ( selectLocator, variableName )
#指定したselect要素(複数選択可能なものを含む)にて選択されている全てのoption要素のid属性値を取得します。
#.
#(引数の説明)
#* selectLocator - select要素を示すelement locator
#.
#(戻り値)
#選択されているoption要素のid属性値配列(カンマ区切り)
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertSelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 
#assertNotSelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 
#verifySelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 
#verifyNotSelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 
#waitForSelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 
#waitForNotSelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 



#storeSelectedId ( selectLocator, variableName )
#指定したselect要素にて選択されているoption要素のid属性値を取得します。
#.
#(引数の説明)
#* selectLocator - select要素を示すelement locator
#.
#(戻り値)
#選択されているoption要素のid属性値
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertSelectedId ( selectLocator, id属性値文字列パターン ) 
#assertNotSelectedId ( selectLocator, id属性値文字列パターン ) 
#verifySelectedId ( selectLocator, id属性値文字列パターン ) 
#verifyNotSelectedId ( selectLocator, id属性値文字列パターン ) 
#waitForSelectedId ( selectLocator, id属性値文字列パターン ) 
#waitForNotSelectedId ( selectLocator, id属性値文字列パターン ) 



#storeSomethingSelected ( selectLocator, variableName )
#select要素でいずれかのoption要素が選択されているかを判定します。
#.
#(引数の説明)
#* selectLocator - select要素を示すelement locator
#.
#(戻り値)
#いずれかのoption要素が選択されていればtrue、さもなくばfalse
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertSomethingSelected ( selectLocator ) 
#assertNotSomethingSelected ( selectLocator ) 
#verifySomethingSelected ( selectLocator ) 
#verifyNotSomethingSelected ( selectLocator ) 
#waitForSomethingSelected ( selectLocator ) 
#waitForNotSomethingSelected ( selectLocator ) 



#storeSelectOptions ( selectLocator, variableName )
#指定したselect要素に含まれる全てのoption要素を取得します。
#.
#(引数の説明)
#* selectLocator - select要素を示すelement locator
#.
#(戻り値)
#指定したselect要素に含まれる全てのoption要素ラベルの配列(カンマ区切り)
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertSelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 
#assertNotSelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 
#verifySelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 
#verifyNotSelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 
#waitForSelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 
#waitForNotSelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 



#storeAttribute ( attributeLocator, variableName )
#要素のattribute(属性)値を取得します。
#.
#(引数の説明)
#* attributeLocator - 要素の属性値を示すelement locator （訳注：Xpath指定することが多いです)
#.
#(戻り値)
#指定した属性の値
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 
#assertNotAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 
#verifyAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 
#verifyNotAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 
#waitForAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 
#waitForNotAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 



#storeTextPresent ( pattern, variableName )
#ユーザーが目にするレンダリングされたページのどこかに指定したテキスト文字列パターンがあるか検証します。
#.
#(引数の説明)
#* pattern - マッチングに用いる文字列パターン
#.
#(戻り値)
#パターンにマッチしたものがあればtrue、なければfalse
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertTextPresent ( 表示されているテキスト文字列パターン ) 
#assertTextNotPresent ( 表示されているテキスト文字列パターン ) 
#verifyTextPresent ( 表示されているテキスト文字列パターン ) 
#verifyTextNotPresent ( 表示されているテキスト文字列パターン ) 
#waitForTextPresent ( 表示されているテキスト文字列パターン ) 
#waitForTextNotPresent ( 表示されているテキスト文字列パターン ) 





#storeElementPresent ( locator, variableName )
#指定した要素がそのページのどこかにあるか検証します。
#.
#(引数の説明)
#* locator - an element locator
#.
#(戻り値)
#その要素があればtrue、なければfalse
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertElementPresent ( locator ) 
#assertElementNotPresent ( locator ) 
#verifyElementPresent ( locator ) 
#verifyElementNotPresent ( locator ) 
#waitForElementPresent ( locator ) 
#waitForElementNotPresent ( locator ) 



#storeVisible ( locator, variableName )
#指定した要素が表示されるかどうかを判定します。ある要素は、CSS(カスケードスタイルシート)で自分自身または
#自分の親要素の""visibility"プロパティを"hidden"に設定したり、"display"プロパティを"none"に設定したりすることに
#よって表示しないようレンダリングされることがあります。このコマンドは指定した要素が表示されない設定になっているとエラーとなります。
#.
#(引数の説明)
#* locator - an element locator
#.
#(戻り値)
#指定した要素が表示されるならtrue、表示されないならfalse
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertVisible ( locator ) 
#assertNotVisible ( locator ) 
#verifyVisible ( locator ) 
#verifyNotVisible ( locator ) 
#waitForVisible ( locator ) 
#waitForNotVisible ( locator ) 



#storeEditable ( locator, variableName )
#指定したinput要素が編集可能かどうか判定します。このコマンドは指定した要素がinput要素でない場合エラーとなります。
#.
#(引数の説明)
#* locator - an element locator
#.
#(戻り値)
#input要素が編集可能ならtrue、編集不可ならfalse
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertEditable ( locator ) 
#assertNotEditable ( locator ) 
#verifyEditable ( locator ) 
#verifyNotEditable ( locator ) 
#waitForEditable ( locator ) 
#waitForNotEditable ( locator ) 



#storeAllButtons ( variableName )
#そのページの全てのボタンのidを返却します。ボタンにidが無い場合、配列には""として表示されます。
#.
#(戻り値)
#ページにあるボタンのid配列(カンマ区切り)
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertAllButtons ( id配列を表す文字列パターン ) 
#assertNotAllButtons ( id配列を表す文字列パターン ) 
#verifyAllButtons ( id配列を表す文字列パターン ) 
#verifyNotAllButtons ( id配列を表す文字列パターン ) 
#waitForAllButtons ( id配列を表す文字列パターン ) 
#waitForNotAllButtons ( id配列を表す文字列パターン ) 



#storeAllLinks ( variableName )
#そのページにある全てのリンクのidを返します。リンクがidを持っていない場合、配列には""として表示されます。
#.
#(戻り値)
#ページ上の全てのリンクのid配列(カンマ区切り)
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertAllLinks ( id配列を表す文字列パターン ) 
#assertNotAllLinks ( id配列を表す文字列パターン ) 
#verifyAllLinks ( id配列を表す文字列パターン ) 
#verifyNotAllLinks ( id配列を表す文字列パターン ) 
#waitForAllLinks ( id配列を表す文字列パターン ) 
#waitForNotAllLinks ( id配列を表す文字列パターン ) 



#storeAllFields ( variableName )
#そのページの全ての入力フィールドのidを返します。入力フィールドにidが無い場合、配列には""として表示されます。
#.
#(戻り値)
#ページにある全ての入力フィールドのid配列(カンマ区切り)
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertAllFields ( id配列を表す文字列パターン ) 
#assertNotAllFields ( id配列を表す文字列パターン ) 
#verifyAllFields ( id配列を表す文字列パターン ) 
#verifyNotAllFields ( id配列を表す文字列パターン ) 
#waitForAllFields ( id配列を表す文字列パターン ) 
#waitForNotAllFields ( id配列を表す文字列パターン ) 



#storeHtmlSource ( variableName )
#htmlタグで括られた全てのHTMLソースを返します。
#.
#(戻り値)
#HTMLソース全体
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertHtmlSource ( HTMLソースを表す文字列パターン ) 
#assertNotHtmlSource ( HTMLソースを表す文字列パターン ) 
#verifyHtmlSource ( HTMLソースを表す文字列パターン ) 
#verifyNotHtmlSource ( HTMLソースを表す文字列パターン ) 
#waitForHtmlSource ( HTMLソースを表す文字列パターン ) 
#waitForNotHtmlSource ( HTMLソースを表す文字列パターン ) 



#storeCursorPosition ( locator, variableName ) （Coreバージョン0.7.0未収録、RC0.8.1新規コマンド）
#指定したinput要素またはテキストエリアにおけるカーソル位置を取得します。このコマンドは全てのブラウザで
#完璧に動作するわけではないので注意してください。
#.
#特に、カーソルや選択がJavaScriptによってクリアされた場合、カーソルが今現在ページからなくなったようでも、
#このコマンドはカーソルが最後にあった位置を返す傾向があります。(これはバグ番号SEL-243として報告されています)
#このコマンドは指定した要素がinput要素またはテキストエリアでない場合、もしくは要素にカーソルが無い場合
#エラーとなります。
#.
#(引数の説明)
#* locator - input要素またはテキストエリアを示すelement locator
#.
#(戻り値)
#フィールド内のカーソル位置(何文字目か)
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertCursorPosition ( locator, カーソル位置 ) 
#assertNotCursorPosition ( locator, カーソル位置 ) 
#verifyCursorPosition ( locator, カーソル位置 ) 
#verifyNotCursorPosition ( locator, カーソル位置 ) 
#waitForCursorPosition ( locator, カーソル位置 ) 
#waitForNotCursorPosition ( locator, カーソル位置 ) 



#storeExpression ( expression, variableName )
#指定した表現を返却します。
#.
#これはJavaScriptのプリプロセッシングのために有効です。これはassertExpression やstoreExpressionといった
#コマンドを生成します。
#.
#(引数の説明) 
#expression - 返却する値
#.
#(戻り値)
#(JavaScriptによって)評価された値
#.
#以下の関連Assertionコマンドが自動的に生成されます。 
#assertExpression ( expression, 評価された値を表す文字列パターン ) 
#assertNotExpression ( expression, 評価された値を表す文字列パターン ) 
#verifyExpression ( expression, 評価された値を表す文字列パターン ) 
#verifyNotExpression ( expression, 評価された値を表す文字列パターン ) 
#waitForExpression ( expression, 評価された値を表す文字列パターン ) 
#waitForNotExpression ( expression, 評価された値を表す文字列パターン ) 





































#----------------------------------
# [assert/verify] Alert系
#
#assertAlert ( メッセージの文字列パターン ) 
#assertAlertNotPresent ( ) 
#assertAlertPresent ( ) 
#verifyAlert ( メッセージの文字列パターン ) 
#verifyAlertNotPresent ( ) 
#verifyAlertPresent ( ) 
#waitForAlert ( メッセージの文字列パターン ) 
#waitForAlertNotPresent ( ) 
#waitForAlertPresent ( ) 
#----------------------------------

selenium.action.assertAlert.column2=確認ダイアログ表示テスト\n（エラー時テスト続行不可）
selenium.action.assertAlert.column3=確認文字 = ${target}
selenium.action.assertAlert.column4=


selenium.action.xxxx.column2=確認ダイアログ表示テスト
selenium.action.xxxx.column3=確認文字 = ${target}
selenium.action.xxxx.column4=

selenium.action.xxxx.column2=確認ダイアログ表示テスト
selenium.action.xxxx.column3=確認文字 = ${target}
selenium.action.xxxx.column4=

selenium.action.verifyAlert.column2=確認ダイアログ表示テスト
selenium.action.verifyAlert.column3=確認文字 = ${target}
selenium.action.verifyAlert.column4=

selenium.action.xxxx.column2=確認ダイアログ表示テスト
selenium.action.xxxx.column3=確認文字 = ${target}
selenium.action.xxxx.column4=

selenium.action.xxxx.column2=確認ダイアログ表示テスト
selenium.action.xxxx.column3=確認文字 = ${target}
selenium.action.xxxx.column4=

selenium.action.waitForAlert.column2=確認ダイアログ表示を待つ
selenium.action.waitForAlert.column3=確認文字 = ${target}
selenium.action.waitForAlert.column4=

selenium.action.xxxx.column2=確認ダイアログ表示テスト
selenium.action.xxxx.column3=確認文字 = ${target}
selenium.action.xxxx.column4=

selenium.action.xxxx.column2=確認ダイアログ表示テスト
selenium.action.xxxx.column4=
selenium.action.xxxx.column3=確認文字 = ${target}


#----------------------------------
# [assert/verify] All系
#
#assertAllButtons ( id配列を表す文字列パターン ) 
#assertAllFields ( id配列を表す文字列パターン ) 
#assertAllLinks ( id配列を表す文字列パターン ) 
#verifyAllButtons ( id配列を表す文字列パターン ) 
#verifyAllFields ( id配列を表す文字列パターン ) 
#verifyAllLinks ( id配列を表す文字列パターン ) 
#waitForAllButtons ( id配列を表す文字列パターン ) 
#waitForAllFields ( id配列を表す文字列パターン ) 
#waitForAllLinks ( id配列を表す文字列パターン ) 
#----------------------------------

selenium.action.assertAllButtons.column2=次のボタンが存在するか\n存在しない場合テスト続行不可
selenium.action.assertAllButtons.column3=ボタン = ${target}
selenium.action.assertAllButtons.column4=

selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}
selenium.action.xxxx.column4=

selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}
selenium.action.xxxx.column4=

selenium.action.verifyAllFields.column2=次のボタンが存在するか
selenium.action.verifyAllFields.column3=ボタン = ${target}
selenium.action.verifyAllFields.column4=

selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}
selenium.action.xxxx.column4=

selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}
selenium.action.xxxx.column4=

selenium.action.verifyAllFields.column2=次のボタンが表示されるまで待つ
selenium.action.verifyAllFields.column3=ボタン = ${target}
selenium.action.verifyAllFields.column4=

selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}
selenium.action.xxxx.column4=

selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}
selenium.action.xxxx.column4=



#----------------------------------
# [assert/verify] All系
#
#assertAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 
#verifyAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 
#waitForAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 
#----------------------------------

selenium.action.assertAttribute.column2=値の検証\n存在しない場合テスト続行不可
selenium.action.assertAttribute.column3=属性 = ${target}
selenium.action.assertAttribute.column4=文字列パターン = ${value}

selenium.action.verifyAttribute.column2=値の検証
selenium.action.verifyAttribute.column3=属性 = ${target}
selenium.action.verifyAttribute.column4=文字列パターン = ${value}

selenium.action.waitForAttribute.column2=属性が現れるまで待つ
selenium.action.waitForAttribute.column3=属性 = ${target}
selenium.action.waitForAttribute.column4=文字列パターン = ${value}



#----------------------------------
# [assert/verify] BodyText系
#
#assertBodyText ( テキスト文字列パターン ) 
#verifyBodyText ( テキスト文字列パターン ) 
#waitForBodyText ( テキスト文字列パターン ) 
#----------------------------------


selenium.action.assertBodyText.column2=文書全体に次の文字があるか検証
selenium.action.assertBodyText.column3=文字列パターン = ${target}
selenium.action.assertBodyText.column4=

selenium.action.verifyBodyText.column2=文書全体に次の文字があるか検証
selenium.action.verifyBodyText.column3=文字列パターン = ${target}
selenium.action.verifyBodyText.column4=

selenium.action.waitForBodyText.column2=文書全体に次の文字が現れるまで待つ
selenium.action.waitForBodyText.column3=文字列パターン = ${target}
selenium.action.waitForBodyText.column4=



#----------------------------------
# [assert/verify] Checked系
#
#assertChecked ( locator, pattern ) 
#verifyChecked ( locator, pattern ) 
#waitForChecked ( locator, pattern ) 
#----------------------------------


selenium.action.assertChecked.column2=値の検証\nエラー時テスト続行不可
selenium.action.assertChecked.column3=コンポーネント = ${target}
selenium.action.assertChecked.column4=値 = ${value}

selenium.action.verifyChecked.column2=値の検証
selenium.action.verifyChecked.column3=コンポーネント = ${target}
selenium.action.verifyChecked.column4=値 = ${value}

selenium.action.waitForChecked.column2=チェックが次の値になるまで待つ
selenium.action.waitForChecked.column3=コンポーネント = ${target}
selenium.action.waitForChecked.column4=値 = ${value}



#----------------------------------
# [assert/verify] Confirmation系
#
#assertConfirmation ( メッセージの文字列パターン ) 
#assertConfirmationNotPresent ( ) 
#assertConfirmationPresent ( ) 
#verifyConfirmation ( メッセージの文字列パターン ) 
#verifyConfirmationNotPresent ( ) 
#verifyConfirmationPresent ( ) 
#waitForConfirmation ( メッセージの文字列パターン ) 
#waitForConfirmationNotPresent ( ) 
#waitForConfirmationPresent ( ) 
#----------------------------------


selenium.action.assertConfirmation.column2=値の検証
selenium.action.assertConfirmation.column3=コンポーネント = ${target}
selenium.action.assertConfirmation.column4=

selenium.action.assertConfirmationNotPresent.column2=値の検証
selenium.action.assertConfirmationNotPresent.column3=コンポーネント = ${target}
selenium.action.assertConfirmationNotPresent.column4=

selenium.action.assertConfirmationPresent.column2=値の検証
selenium.action.assertConfirmationPresent.column3=コンポーネント = ${target}
selenium.action.assertConfirmationPresent.column4=

selenium.action.verifyConfirmation.column2=値の検証
selenium.action.verifyConfirmation.column3=コンポーネント = ${target}
selenium.action.verifyConfirmation.column4=

selenium.action.verifyConfirmationNotPresent.column2=値の検証
selenium.action.verifyConfirmationNotPresent.column3=コンポーネント = ${target}
selenium.action.verifyConfirmationNotPresent.column4=

selenium.action.verifyConfirmationPresent.column2=値の検証
selenium.action.verifyConfirmationPresent.column3=コンポーネント = ${target}
selenium.action.verifyConfirmationPresent.column4=


#----------------------------------
# [assert/verify] CursorPosition系
#
#assertCursorPosition ( locator, カーソル位置 ) 
#verifyCursorPosition ( locator, カーソル位置 ) 
#waitForCursorPosition ( locator, カーソル位置 ) 
#----------------------------------


selenium.action.assertCursorPosition.column2=カーソル位置の検証\nエラー時テスト続行不可
selenium.action.assertCursorPosition.column3=コンポーネント = ${target}
selenium.action.assertCursorPosition.column4=カーソル位置 = ${value}

selenium.action.verifyCursorPosition.column2=カーソル位置の検証
selenium.action.verifyCursorPosition.column3=コンポーネント = ${target}
selenium.action.verifyCursorPosition.column4=カーソル位置 = ${value}

selenium.action.waitForCursorPosition.column2=カーソルが指定した位置に来るのを待つ
selenium.action.waitForCursorPosition.column3=コンポーネント = ${target}
selenium.action.waitForCursorPosition.column4=カーソル位置 = ${value}



#----------------------------------
# [assert/verify] Editable系
#
#assertEditable ( locator ) 
#verifyEditable ( locator ) 
#waitForEditable ( locator ) 
#----------------------------------


selenium.action.assertEditable.column2=コンポーネントが使用可能か\nエラー時テスト続行不可
selenium.action.assertEditable.column3=コンポーネント = ${target}
selenium.action.assertEditable.column4=

selenium.action.verifyEditable.column2=コンポーネントが使用可能か証
selenium.action.verifyEditable.column3=コンポーネント = ${target}
selenium.action.verifyEditable.column4=

selenium.action.waitForEditable.column2=コンポーネントが使用可能になるまで待つ。
selenium.action.waitForEditable.column3=コンポーネント = ${target}
selenium.action.waitForEditable.column4=



#----------------------------------
# [assert/verify] Elementxxxxxx系
#
#assertElementNotPresent ( locator ) 
#assertElementPresent ( locator ) 
#verifyElementNotPresent ( locator ) 
#verifyElementPresent ( locator ) 
#waitForElementNotPresent ( locator ) 
#waitForElementPresent ( locator ) 
#----------------------------------


selenium.action.assertElementNotPresent.column2=ページ内のコンポーネント確認
selenium.action.assertElementNotPresent.column3=コンポーネント = ${target}
selenium.action.assertElementNotPresent.column4=

selenium.action.assertElementPresent.column2=ページ内のコンポーネント確認\n存在しない場合テスト続行不可
selenium.action.assertElementPresent.column3=コンポーネント = ${target}
selenium.action.assertElementPresent.column4=

selenium.action.verifyElementNotPresent.column2=ページ内のコンポーネント確認
selenium.action.verifyElementNotPresent.column3=コンポーネント = ${target}
selenium.action.verifyElementNotPresent.column4=

selenium.action.verifyElementPresent.column2=ページ内のコンポーネント確認
selenium.action.verifyElementPresent.column3=コンポーネント = ${target}
selenium.action.verifyElementPresent.column4=

selenium.action.waitForElementNotPresent.column2=ページ内のコンポーネントが無くなるまで待つ
selenium.action.waitForElementNotPresent.column3=コンポーネント = ${target}
selenium.action.waitForElementNotPresent.column4=

selenium.action.waitForElementPresent.column2=ページ内のコンポーネントが表示されるまで待つ
selenium.action.waitForElementPresent.column3=コンポーネント = ${target}
selenium.action.waitForElementPresent.column4=




#----------------------------------
# [assert/verify] Eval系
#
#assertEval ( script, scriptを実行した結果の文字列パターン ) 
#verifyEval ( script, scriptを実行した結果の文字列パターン ) 
#waitForEval ( script, scriptを実行した結果の文字列パターン ) 
#----------------------------------

selenium.action.assertEval.column2=指定したJavascriptの評価結果\nエラー時テスト続行不可
selenium.action.assertEval.column3=スクリプト = ${target}
selenium.action.assertEval.column4=パターン = ${value}

selenium.action.verifyEval.column2=指定したJavascriptの評価結果
selenium.action.verifyEval.column3=スクリプト = ${target}
selenium.action.verifyEval.column4=パターン = ${value}

selenium.action.xxxx.column2=指定したJavascriptの評価結果
selenium.action.xxxx.column3=スクリプト = ${target}
selenium.action.xxxx.column4=パターン = ${value}




#----------------------------------
# [assert/verify] Expression系
#
#assertExpression ( expression, 評価された値を表す文字列パターン ) 
#verifyExpression ( expression, 評価された値を表す文字列パターン ) 
#waitForExpression ( expression, 評価された値を表す文字列パターン ) 
#----------------------------------


selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}



#----------------------------------
# [assert/verify] HtmlSource系
#
#assertHtmlSource ( HTMLソースを表す文字列パターン ) 
#verifyHtmlSource ( HTMLソースを表す文字列パターン ) 
#waitForHtmlSource ( HTMLソースを表す文字列パターン ) 
#----------------------------------

selenium.action.assertHtmlSource.column2=HTML内の確認\nエラー時テスト続行不可
selenium.action.assertHtmlSource.column3=文字列パターン = ${target}
selenium.action.assertHtmlSource.column4=

selenium.action.verifyHtmlSource.column2=HTML内の確認
selenium.action.verifyHtmlSource.column3=文字列パターン = ${target}
selenium.action.verifyHtmlSource.column4=

selenium.action.waitForHtmlSource.column2=HTMLに現れるまで待つ
selenium.action.waitForHtmlSource.column3=文字列パターン = ${target}
selenium.action.waitForHtmlSource.column4=




#----------------------------------
# [assert/verify] Location系
#
#assertLocation ( URLの文字列パターン ) 
#verifyLocation ( URLの文字列パターン ) 
#waitForLocation ( URLの文字列パターン ) 
#----------------------------------

selenium.action.assertLocation.column2=現在ページURL確認\nエラー時テスト続行不可
selenium.action.assertLocation.column3=URL = ${target}
selenium.action.assertLocation.column4=

selenium.action.verifyLocation.column2=現在ページURL確認
selenium.action.verifyLocation.column3=URL = ${target}
selenium.action.verifyLocation.column4=

selenium.action.waitForLocation.column2=現在ページURLが次になるまで待つ
selenium.action.waitForLocation.column3=URL = ${target}
selenium.action.waitForLocation.column4=




#----------------------------------
# [assert/verify] Notxxxxx系
#
#assertNotAlert ( メッセージの文字列パターン ) 
#assertNotAllButtons ( id配列を表す文字列パターン ) 
#assertNotAllFields ( id配列を表す文字列パターン ) 
#assertNotAllLinks ( id配列を表す文字列パターン ) 
#assertNotAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 
#assertNotBodyText ( テキスト文字列パターン ) 
#assertNotChecked ( locator, pattern ) 
#assertNotConfirmation ( メッセージの文字列パターン ) 
#assertNotCursorPosition ( locator, カーソル位置 ) 
#assertNotEditable ( locator ) 
#assertNotEval ( script, scriptを実行した結果の文字列パターン ) 
#assertNotExpression ( expression, 評価された値を表す文字列パターン ) 
#assertNotHtmlSource ( HTMLソースを表す文字列パターン ) 
#assertNotLocation ( URLの文字列パターン ) 
#assertNotPrompt ( メッセージの文字列パターン ) 
#assertNotSelected ( selectLocator, optionLocator ) 
#assertNotSelectedId ( selectLocator, id属性値文字列パターン ) 
#assertNotSelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 
#assertNotSelectedIndex ( selectLocator, インデックス番号 ) 
#assertNotSelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 
#assertNotSelectedLabel ( selectLocator, ラベル文字列パターン ) 
#assertNotSelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 
#assertNotSelectedValue ( selectLocator, value属性値文字列パターン ) 
#assertNotSelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 
#assertNotSelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 
#assertNotSomethingSelected ( selectLocator ) 
#assertNotTable ( tableCellAddress, 指定したセルの文字列パターン ) 
#assertNotText ( locator, テキスト文字列パターン ) 
#assertNotTitle ( titleの文字列パターン ) 
#assertNotValue ( locator, value属性の文字列パターン ) 
#assertNotVisible ( locator ) 
#verifyNotAlert ( メッセージの文字列パターン ) 
#verifyNotAllButtons ( id配列を表す文字列パターン ) 
#verifyNotAllFields ( id配列を表す文字列パターン ) 
#verifyNotAllLinks ( id配列を表す文字列パターン ) 
#verifyNotAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 
#verifyNotBodyText ( テキスト文字列パターン ) 
#verifyNotChecked ( locator, pattern ) 
#verifyNotConfirmation ( メッセージの文字列パターン ) 
#verifyNotCursorPosition ( locator, カーソル位置 ) 
#verifyNotEditable ( locator ) 
#verifyNotEval ( script, scriptを実行した結果の文字列パターン ) 
#verifyNotExpression ( expression, 評価された値を表す文字列パターン ) 
#verifyNotHtmlSource ( HTMLソースを表す文字列パターン ) 
#verifyNotLocation ( URLの文字列パターン ) 
#verifyNotPrompt ( メッセージの文字列パターン ) 
#verifyNotSelected ( selectLocator, optionLocator ) 
#verifyNotSelectedId ( selectLocator, id属性値文字列パターン ) 
#verifyNotSelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 
#verifyNotSelectedIndex ( selectLocator, インデックス番号 ) 
#verifyNotSelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 
#verifyNotSelectedLabel ( selectLocator, ラベル文字列パターン ) 
#verifyNotSelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 
#verifyNotSelectedValue ( selectLocator, value属性値文字列パターン ) 
#verifyNotSelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 
#verifyNotSelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 
#verifyNotSomethingSelected ( selectLocator ) 
#verifyNotTable ( tableCellAddress, 指定したセルの文字列パターン ) 
#verifyNotText ( locator, テキスト文字列パターン ) 
#verifyNotTitle ( titleの文字列パターン ) 
#verifyNotValue ( locator, value属性の文字列パターン ) 
#verifyNotVisible ( locator ) 
#waitForNotAlert ( メッセージの文字列パターン ) 
#waitForNotAllButtons ( id配列を表す文字列パターン ) 
#waitForNotAllFields ( id配列を表す文字列パターン ) 
#waitForNotAllLinks ( id配列を表す文字列パターン ) 
#waitForNotAttribute ( attributeLocator, 指定した属性の値を表す文字列パターン ) 
#waitForNotBodyText ( テキスト文字列パターン ) 
#waitForNotChecked ( locator, pattern ) 
#waitForNotConfirmation ( メッセージの文字列パターン ) 
#waitForNotCursorPosition ( locator, カーソル位置 ) 
#waitForNotEditable ( locator ) 
#waitForNotEval ( script, scriptを実行した結果の文字列パターン ) 
#waitForNotExpression ( expression, 評価された値を表す文字列パターン ) 
#waitForNotHtmlSource ( HTMLソースを表す文字列パターン ) 
#waitForNotLocation ( URLの文字列パターン ) 
#waitForNotPrompt ( メッセージの文字列パターン ) 
#waitForNotSelected ( selectLocator, optionLocator ) 
#waitForNotSelectedId ( selectLocator, id属性値文字列パターン ) 
#waitForNotSelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 
#waitForNotSelectedIndex ( selectLocator, インデックス番号 ) 
#waitForNotSelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 
#waitForNotSelectedLabel ( selectLocator, ラベル文字列パターン ) 
#waitForNotSelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 
#waitForNotSelectedValue ( selectLocator, value属性値文字列パターン ) 
#waitForNotSelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 
#waitForNotSelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 
#waitForNotSomethingSelected ( selectLocator ) 
#waitForNotTable ( tableCellAddress, 指定したセルの文字列パターン ) 
#waitForNotText ( locator, テキスト文字列パターン ) 
#waitForNotTitle ( titleの文字列パターン ) 
#waitForNotValue ( locator, value属性の文字列パターン ) 
#waitForNotVisible ( locator ) 
#----------------------------------

selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}




#----------------------------------
# [assert/verify] Prompt系
#
#assertPrompt ( メッセージの文字列パターン ) 
#assertPromptNotPresent ( ) 
#assertPromptPresent ( ) 
#verifyPrompt ( メッセージの文字列パターン ) 
#verifyPromptNotPresent ( ) 
#verifyPromptPresent ( ) 
#waitForPrompt ( メッセージの文字列パターン ) 
#waitForPromptNotPresent ( ) 
#waitForPromptPresent ( ) 
#----------------------------------

selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}




#----------------------------------
# [assert/verify] Selectedxxxx系
#
#assertSelectedId ( selectLocator, id属性値文字列パターン ) 
#assertSelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 
#assertSelectedIndex ( selectLocator, インデックス番号 ) 
#assertSelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 
#assertSelectedLabel ( selectLocator, ラベル文字列パターン ) 
#assertSelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 
#assertSelectedValue ( selectLocator, value属性値文字列パターン ) 
#assertSelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 
#verifySelected ( selectLocator, optionLocator ) 
#verifySelectedId ( selectLocator, id属性値文字列パターン ) 
#verifySelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 
#verifySelectedIndex ( selectLocator, インデックス番号 ) 
#verifySelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 
#verifySelectedLabel ( selectLocator, ラベル文字列パターン ) 
#verifySelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 
#verifySelectedValue ( selectLocator, value属性値文字列パターン ) 
#verifySelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 
#waitForSelected ( selectLocator, optionLocator ) 
#waitForSelectedId ( selectLocator, id属性値文字列パターン ) 
#waitForSelectedIds ( selectLocator, id属性値配列を表す文字列パターン ) 
#waitForSelectedIndex ( selectLocator, インデックス番号 ) 
#waitForSelectedIndexes ( selectLocator, インデックス配列を表す文字列パターン ) 
#waitForSelectedLabel ( selectLocator, ラベル文字列パターン ) 
#waitForSelectedLabels ( selectLocator, ラベルの配列を表す文字列パターン ) 
#waitForSelectedValue ( selectLocator, value属性値文字列パターン ) 
#waitForSelectedValues ( selectLocator, value属性値配列を表す文字列パターン ) 
#waitForSelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 
#----------------------------------


selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}



#----------------------------------
# [assert/verify] Selectedxxxx系
#
#assertSelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 
#verifySelectOptions ( selectLocator, option要素ラベルの配列文字列パターン ) 
#----------------------------------


selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}



#----------------------------------
# [assert/verify] SomethingSelected系
#
#assertSomethingSelected ( selectLocator ) 
#verifySomethingSelected ( selectLocator ) 
#waitForSomethingSelected ( selectLocator ) 
#----------------------------------

selenium.action.assertSomethingSelected.column2=選択の確認（何か選択されていること）\nエラー時テスト続行不可
selenium.action.assertSomethingSelected.column3=コンポーネント = ${target}
selenium.action.assertSomethingSelected.column4=

selenium.action.verifySomethingSelected.column2=選択の確認（何か選択されていること）
selenium.action.verifySomethingSelected.column3=コンポーネント = ${target}
selenium.action.verifySomethingSelected.column4=

selenium.action.waitForSomethingSelected.column2=選択状態を待つ（何か選択されること）
selenium.action.waitForSomethingSelected.column3=コンポーネント = ${target}
selenium.action.waitForSomethingSelected.column4=




#----------------------------------
# [assert/verify] Table系
#
#assertTable ( tableCellAddress, 指定したセルの文字列パターン ) 
#verifyTable ( tableCellAddress, 指定したセルの文字列パターン ) 
#waitForTable ( tableCellAddress, 指定したセルの文字列パターン ) 
#----------------------------------


selenium.action.xxxx.column2=値の検証
selenium.action.xxxx.column3=コンポーネント = ${target}



#----------------------------------
# [assert/verify] Textxxxxx系
#
#assertText ( locator, テキスト文字列パターン ) 
#assertTextNotPresent ( 表示されているテキスト文字列パターン ) 
#assertTextPresent ( 表示されているテキスト文字列パターン ) 
#verifyText ( locator, テキスト文字列パターン ) 
#verifyTextNotPresent ( 表示されているテキスト文字列パターン ) 
#verifyTextPresent ( 表示されているテキスト文字列パターン ) 
#waitForText ( locator, テキスト文字列パターン ) 
#waitForTextNotPresent ( 表示されているテキスト文字列パターン ) 
#waitForTextPresent ( 表示されているテキスト文字列パターン ) 
#----------------------------------

selenium.action.assertText.column2=値の検証\nエラー時テスト不可
selenium.action.assertText.column3=コンポーネント = ${target}
selenium.action.assertText.column4=文字列パターン = ${value}

selenium.action.assertTextNotPresent.column2=値が存在しないこと\nエラー時テスト不可（ページ内の存在）
selenium.action.assertTextNotPresent.column3=文字列パターン = ${target}
selenium.action.assertTextNotPresent.column4=

selenium.action.assertTextPresent.column2=値が存在すること\nエラー時テスト不可\n（ページ内の存在）
selenium.action.assertTextPresent.column3=文字列パターン = ${target}
selenium.action.assertTextPresent.column4=


selenium.action.verifyText.column2=値の検証\nエラー時テスト不可
selenium.action.verifyText.column3=コンポーネント = ${target}
selenium.action.verifyText.column4=文字列パターン = ${value}

selenium.action.verifyTextNotPresent.column2=値が存在しないこと\nエラー時テスト不可（ページ内の存在）
selenium.action.verifyTextNotPresent.column3=文字列パターン = ${target}
selenium.action.verifyTextNotPresent.column4=

selenium.action.verifyTextPresent.column2=値が存在すること\nエラー時テスト不可\n（ページ内の存在）
selenium.action.verifyTextPresent.column3=文字列パターン = ${target}
selenium.action.verifyTextPresent.column4=

selenium.action.waitForText.column2=値が次になるまで待つ
selenium.action.waitForText.column3=コンポーネント = ${target}
selenium.action.waitForText.column4=文字列パターン = ${value}

selenium.action.waitForTextNotPresent.column2=値がページから消えるまで待つ
selenium.action.waitForTextNotPresent.column3=値 = ${target}
selenium.action.waitForTextNotPresent.column4=

selenium.action.waitForTextPresent.column2=値に表示されるまで待つ
selenium.action.waitForTextPresent.column3=値 = ${target}
selenium.action.waitForTextPresent.column4=




#----------------------------------
# [assert/verify] Title系
#
#assertTitle ( titleの文字列パターン ) 
#verifyTitle ( titleの文字列パターン ) 
#waitForTitle ( titleの文字列パターン ) 
#----------------------------------

selenium.action.assertTitle.column2=値の検証
selenium.action.assertTitle.column3=title = ${target} \n(エラー時テスト続行不可)
selenium.action.assertTitle.column4=

selenium.action.verifyTitle.column2=値の検証
selenium.action.verifyTitle.column3=title = ${target} \n(エラー時テスト続行可)
selenium.action.verifyTitle.column4=

selenium.action.waitForTitle.column2=タイトルが次になるのを待つ
selenium.action.waitForTitle.column3=title = ${target}
selenium.action.waitForTitle.column4=


#----------------------------------
# [assert/verify] Value系
#
#assertValue ( locator, value属性の文字列パターン ) 
#verifyValue ( locator, value属性の文字列パターン ) 
#waitForValue ( locator, value属性の文字列パターン ) 
#----------------------------------


selenium.action.assertValue.column2=値の検証\nエラー時テスト続行不可
selenium.action.assertValue.column3=コンポーネント = ${target}
selenium.action.assertValue.column4=値 = ${value}

selenium.action.verifyValue.column2=値の検証
selenium.action.verifyValue.column3=コンポーネント = ${target}
selenium.action.verifyValue.column4=値 = ${value}

selenium.action.waitForValue.column2=値が次になるまで待つ
selenium.action.waitForValue.column3=コンポーネント = ${target}
selenium.action.waitForValue.column4=値 = ${value}



#----------------------------------
# [assert/verify] Visible系
#
#assertVisible ( locator ) 
#verifyVisible ( locator ) 
#waitForVisible ( locator ) 
#----------------------------------

selenium.action.assertVisible.column2=表示されていること\nエラー時テスト続行不可
selenium.action.assertVisible.column3=コンポーネント = ${target}
selenium.action.assertVisible.column4=

selenium.action.verifyVisible.column2=表示されていること
selenium.action.verifyVisible.column3=コンポーネント = ${target}
selenium.action.verifyVisible.column4=

selenium.action.waitForVisible.column2=表示されるまで待つ
selenium.action.waitForVisible.column3=コンポーネント = ${target}
selenium.action.waitForVisible.column4=






















selenium.action.selectFrame.column2=フレームの選択を行う
selenium.action.selectFrame.column3=フレーム＝${target}
selenium.action.selectFrame.column4=


selenium.action.refreshAndWait.column2=画面をリフレッシュする。
selenium.action.refreshAndWait.column3=
selenium.action.refreshAndWait.column4=

selenium.action.openWindow.column2=ウインドウを開く
selenium.action.openWindow.column3=ＵＲＬ＝${target}
selenium.action.openWindow.column4=ウインドウターゲット＝${value}


selenium.action.pause.column2=指定時間待つ
selenium.action.pause.column3=時間＝${target} ミリ秒
selenium.action.pause.column4=

